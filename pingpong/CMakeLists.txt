set(PINGPONG pingpong-service)
set(PINGPONG_PROTOBJ pingpong-service-proto)
set(PINGPONG_SERVICE_DIR ${CMAKE_CURRENT_LIST_DIR})
set(PINGPONG_HEADERS ${PINGPONG}_HEADERS)
set(PINGPONG_SOURCES ${PINGPONG}_SRC)
set(PINGPONG_INCLUDE_DIRS ${CMAKE_CURRENT_LIST_DIR}/include)
set(PINGPONG_SOURCES_DIR ${CMAKE_CURRENT_LIST_DIR}/src)
set(PINGPONG_PROTOFILES_DIR ${CMAKE_CURRENT_LIST_DIR}/protofiles)
set(PINGPONG_PROTO_BINARY_DIR ${CMAKE_CURRENT_LIST_DIR}/generated)

file(GLOB PINGPONG_HEADERS ${PINGPONG_INCLUDE_DIRS}/pingpong/*.hpp)
file(GLOB PINGPONG_SOURCES ${PINGPONG_SOURCES_DIR}/*.cpp)
file(GLOB PINGPONG_PROTOFILES ${PINGPONG_PROTOFILES_DIR}/*.proto)

if(NOT EXISTS ${PINGPONG_PROTO_BINARY_DIR})
    make_directory(${PINGPONG_PROTO_BINARY_DIR})
endif(NOT EXISTS ${PINGPONG_PROTO_BINARY_DIR})

# generate protobuf headers and sources
add_library(${PINGPONG_PROTOBJ} OBJECT ${PINGPONG_PROTOFILES})
target_link_libraries(${PINGPONG_PROTOBJ} PUBLIC 
    CONAN_LIB::protobuf_protocd
    CONAN_LIB::protobuf_protobufd
    CONAN_LIB::grpc_grpc++_unsecure)
target_include_directories(${PINGPONG_PROTOBJ} PUBLIC 
    $<BUILD_INTERFACE:${PINGPONG_PROTO_BINARY_DIR}>)
# asio_grpc_protobuf_generate(
#     GENERATE_GRPC 
#     GENERATE_MOCK_CODE
#     OUT_VAR PINGPONG_PROTO_GENERATED_FILES
#     USAGE_REQUIREMENT PUBLIC
#     IMPORT_DIRS ${PINGPONG_PROTOFILES_DIR}
#     TARGET ${PINGPONG_PROTOBJ}
#     OUT_DIR ${PINGPONG_PROTO_BINARY_DIR}
#     PROTOS ${PINGPONG_PROTIFILES})


protobuf_generate(TARGET ${PINGPONG_PROTOBJ}
    PROTOS ${PINGPONG_PROTIFILES}
    OUT_VAR PINGPONG_PROTO_GENERATED_FILES
    IMPORT_DIRS ${PINGPONG_PROTOFILES_DIR}
    PROTOC_OUT_DIR ${PINGPONG_PROTO_BINARY_DIR}
)

# protobuf_generate(
#     TARGET ${PINGPONG_PROTIFILES}
#     OUT_VAR PINGPONG_PROTO_GENERATED_FILES
#     LANGUAGE grpc
#     PROTOS ${PINGPONG_PROTIFILES}
#     GENERATE_EXTENSIONS .grpc.pb.h .grpc.pb.cc
#     PLUGIN "protoc-gen-grpc=\$<TARGET_FILE:CONAN_LIB::grpc_grpc_plugin_support>" #gRPC::grpc_cpp_plugin
#     PLUGIN_OPTIONS "generate_mock_code=true"
#     IMPORT_DIRS ${PINGPONG_PROTOFILES_DIR}
#     PROTOC_OUT_DIR "${PINGPONG_PROTO_BINARY_DIR}")


add_library(${PINGPONG} STATIC 
    ${PINGPONG_HEADERS}
    ${PINGPONG_SOURCES}
)
target_include_directories(${PINGPONG} PUBLIC
    CONAN_PKG::boost
    CONAN_PKG::asio-grpc
    ${PINGPONG_INCLUDE_DIRS}
)
target_link_libraries(${PINGPONG} PUBLIC
    Threads::Threads
)

add_library(${PINGPONG}-so SHARED 
    ${PINGPONG_HEADERS}
    ${PINGPONG_SOURCES}
)
target_include_directories(${PINGPONG}-so PUBLIC
    CONAN_PKG::boost
    CONAN_PKG::asio-grpc
    ${PINGPONG_INCLUDE_DIRS}
)
target_link_libraries(${PINGPONG}-so PUBLIC
    Threads::Threads
)